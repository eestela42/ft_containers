Fonctions membres 	:
	//vector();
	//explicit vector(const Allocator& alloc);
	/*explicit vector( size_type count,
                 const T& value = T(),
                 const Allocator& alloc = Allocator());
	*/
	template< class InputIt >
	vector( InputIt first, InputIt last,
        const Allocator& alloc = Allocator() );
	//vector( const vector& other );

	vector& operator=( const vector& other );
	void assign( size_type count, const T& value );
	template< class InputIt >
	void assign( InputIt first, InputIt last );
	allocator_type get_allocator() const;

	reference at( size_type pos );
	const_reference at( size_type pos ) const;
	reference operator[]( size_type pos );
	const_reference operator[]( size_type pos ) const;
	reference front();
	const_reference front() const;
	reference back();
	const_reference back() const;
	T* data();
	const T* data() const;

	iterator begin();
	const_iterator begin() const;
	iterator end();
	const_iterator end() const;
	reverse_iterator rbegin();
	const_reverse_iterator rbegin() const;
	reverse_iterator rend();
	const_reverse_iterator rend() const;

	bool empty() const;
	size_type size() const;
	size_type max_size() const;
	void reserve( size_type new_cap );
	size_type capacity() const;

	void clear();
	iterator insert( iterator pos, const T& value );
	void insert( iterator pos, size_type count, const T& value );
	template< class InputIt >
	void insert( iterator pos, InputIt first, InputIt last );
	iterator erase( iterator pos );
	iterator erase( iterator first, iterator last );
	void push_back( const T& value );
	void pop_back();
	void resize( size_type count, T value = T() );
	void swap( vector& other );


fonctions non-membres	:
	template< class T, class Alloc >
bool operator==( const std::vector<T,Alloc>& lhs,
                 const std::vector<T,Alloc>& rhs );
bool operator!=( const std::vector<T,Alloc>& lhs,
                 const std::vector<T,Alloc>& rhs );
bool operator<( const std::vector<T,Alloc>& lhs,
                const std::vector<T,Alloc>& rhs );
bool operator<=( const std::vector<T,Alloc>& lhs,
                 const std::vector<T,Alloc>& rhs );
bool operator>( const std::vector<T,Alloc>& lhs,
                const std::vector<T,Alloc>& rhs );
bool operator>=( const std::vector<T,Alloc>& lhs,
                 const std::vector<T,Alloc>& rhs );

void swap( std::vector<T,Alloc>& lhs,
           std::vector<T,Alloc>& rhs );






	
	
	
	
	
	
	